name: Docker Branch Build

# Builds Docker images for every branch push with branch name in tag
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-branch:
    name: Docker Build (Branch)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Sanitize branch name
        id: branch
        run: |
          # Convert branch name to valid Docker tag
          BRANCH_NAME="${{ github.ref_name }}"
          SAFE_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | tr '[:upper:]' '[:lower:]')
          echo "safe_name=${SAFE_BRANCH}" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch name with timestamp for uniqueness
            type=raw,value=${{ steps.branch.outputs.safe_name }}-${{ steps.branch.outputs.timestamp }}
            # Branch name with short SHA
            type=raw,value=${{ steps.branch.outputs.safe_name }}-${{ github.sha }}
            # Just branch name (overwrites previous builds)
            type=raw,value=${{ steps.branch.outputs.safe_name }}
            # PR number for pull requests
            type=ref,event=pr,prefix=pr-
          labels: |
            org.opencontainers.image.title=nano-web
            org.opencontainers.image.description=Ultra-fast static file server
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.branch=${{ github.ref_name }}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.multi
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Show built images
        if: github.event_name != 'pull_request'
        run: |
          echo "🐳 **Built Docker Images:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Latest build for this branch:" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.safe_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Specific build with timestamp:" >> $GITHUB_STEP_SUMMARY  
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.safe_name }}-${{ steps.branch.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Specific build with commit SHA:" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.safe_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Run the ultra-fast server:" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -p 3000:3000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v \$(pwd)/public:/public \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.safe_name }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  quick-test:
    name: Quick Docker Test
    runs-on: ubuntu-latest
    needs: docker-branch
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Test Docker image
        run: |
          # Create test content
          mkdir -p public
          echo "<html><body>Hello from ${{ github.ref_name }}!</body></html>" > public/index.html
          
          # Sanitize branch name
          BRANCH_NAME="${{ github.ref_name }}"
          SAFE_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | tr '[:upper:]' '[:lower:]')
          
          # Pull and test the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_BRANCH}
          
          # Start container
          docker run -d --name test-nano-web \
            -p 3000:3000 \
            -v $(pwd)/public:/public \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_BRANCH}
            
          # Wait for startup
          sleep 5
          
          # Test health endpoint
          curl -f http://localhost:3000/_health || exit 1
          
          # Test serving content
          RESPONSE=$(curl -s http://localhost:3000/)
          if [[ "$RESPONSE" != *"Hello from ${{ github.ref_name }}!"* ]]; then
            echo "❌ Content test failed"
            echo "Expected: Hello from ${{ github.ref_name }}!"
            echo "Got: $RESPONSE"
            exit 1
          fi
          
          echo "✅ Docker image test passed!" >> $GITHUB_STEP_SUMMARY
          echo "Branch \`${{ github.ref_name }}\` is serving correctly" >> $GITHUB_STEP_SUMMARY
          
          # Cleanup
          docker stop test-nano-web
          docker rm test-nano-web