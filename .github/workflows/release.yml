name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}

  build-binaries:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: nano-web-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            name: nano-web-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: nano-web-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: nano-web-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: nano-web-windows-amd64.exe
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            export CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc
            export CXX_aarch64_unknown_linux_musl=aarch64-linux-gnu-g++
            export AR_aarch64_unknown_linux_musl=aarch64-linux-gnu-ar
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc
          fi
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          
      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/nano-web.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/nano-web ${{ matrix.name }}
          fi
          
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  build-amd64-release:
    name: Build AMD64 Release Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
      - name: Build and push AMD64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.single
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-amd64
          cache-from: type=gha,scope=release-amd64
          cache-to: type=gha,mode=max,scope=release-amd64

  build-arm64-release:
    name: Build ARM64 Release Image
    runs-on: ubuntu-24.04-arm64
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
      - name: Build and push ARM64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.single
          platforms: linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-arm64
          cache-from: type=gha,scope=release-arm64
          cache-to: type=gha,mode=max,scope=release-arm64

  create-release-manifest:
    name: Create Release Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [build-amd64-release, build-arm64-release]
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)  
          echo "major=${MAJOR}" >> $GITHUB_OUTPUT
          echo "major_minor=${MAJOR}.${MINOR}" >> $GITHUB_OUTPUT
          
      - name: Create and push release manifests
        run: |
          # Create multi-arch manifests for different version tags
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }} \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-arm64
            
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:${{ steps.version.outputs.major_minor }} \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-arm64
            
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:${{ steps.version.outputs.major }} \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-arm64
            
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-arm64

  attach-binaries:
    name: Attach binaries to release
    runs-on: ubuntu-latest
    needs: build-binaries
    if: github.event_name == 'release'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Attach binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            nano-web-linux-amd64/nano-web-linux-amd64
            nano-web-linux-arm64/nano-web-linux-arm64
            nano-web-macos-amd64/nano-web-macos-amd64
            nano-web-macos-arm64/nano-web-macos-arm64
            nano-web-windows-amd64.exe/nano-web-windows-amd64.exe

  update-formula:
    name: Update Homebrew formula
    runs-on: ubuntu-latest
    needs: [build-binaries, attach-binaries, create-release-manifest]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
      - name: Download macOS AMD64 binary for SHA calculation
        uses: actions/download-artifact@v4
        with:
          name: nano-web-macos-amd64
          
      - name: Calculate SHA256
        id: sha
        run: |
          SHA256=$(shasum -a 256 nano-web-macos-amd64 | cut -d' ' -f1)
          echo "sha256=${SHA256}" >> $GITHUB_OUTPUT
          
      - name: Update Homebrew formula
        run: |
          cat > Formula/nano-web.rb << EOF
          class NanoWeb < Formula
            desc "Ultra-fast static file server built with Rust"
            homepage "https://github.com/radiosilence/nano-web"
            url "https://github.com/radiosilence/nano-web/releases/download/v${{ steps.version.outputs.version }}/nano-web-macos-amd64"
            version "${{ steps.version.outputs.version }}"
            sha256 "${{ steps.sha.outputs.sha256 }}"
            
            on_arm do
              url "https://github.com/radiosilence/nano-web/releases/download/v${{ steps.version.outputs.version }}/nano-web-macos-arm64"
            end
            
            def install
              bin.install "nano-web-macos-amd64" => "nano-web" if Hardware::CPU.intel?
              bin.install "nano-web-macos-arm64" => "nano-web" if Hardware::CPU.arm?
            end
            
            test do
              system "#{bin}/nano-web", "--help"
            end
          end
          EOF
          
      - name: Commit formula update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/nano-web.rb
          git commit -m "🍺 Update Homebrew formula to v${{ steps.version.outputs.version }}"
          git push