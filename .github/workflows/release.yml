name: üöÄ Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        default: "v0.2.0"

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: üêπ Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: üîß Set up Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Download dependencies
        run: task deps

      - name: üß™ Run tests
        run: task test

      - name: üî• Run benchmarks
        run: task bench

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          - goos: darwin
            goarch: amd64
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            name: darwin-arm64
          - goos: freebsd
            goarch: amd64
            name: freebsd-amd64
          - goos: openbsd
            goarch: amd64
            name: openbsd-amd64
          - goos: netbsd
            goarch: amd64
            name: netbsd-amd64
          - goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe

    steps:
      - uses: actions/checkout@v4

      - name: üêπ Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: üîß Set up Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x

      - name: üì¶ Download dependencies
        run: task deps

      - name: üèóÔ∏è Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          task build
          if [ "${{ matrix.goos }}" = "windows" ]; then
            mv nano-web nano-web-${{ matrix.name }}.exe
          else
            mv nano-web nano-web-${{ matrix.name }}
          fi

      - name: üì¶ Create tarball (Unix)
        if: matrix.goos != 'windows'
        run: |
          tar -czf nano-web-${{ matrix.name }}.tar.gz nano-web-${{ matrix.name }}

      - name: üì¶ Create zip (Windows)
        if: matrix.goos == 'windows'
        run: |
          zip nano-web-${{ matrix.name }}.zip nano-web-${{ matrix.name }}${{ matrix.ext }}

      - name: ‚¨ÜÔ∏è Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nano-web-${{ matrix.name }}
          path: |
            nano-web-${{ matrix.name }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìã Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: ‚¨áÔ∏è Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: üìÅ Move artifacts to release directory
        run: |
          mkdir -p release
          find ./artifacts -name "nano-web-*" -type f | while read file; do
            cp "$file" release/
          done
          ls -la release/

      - name: üìù Generate changelog
        id: changelog
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual releases, create a simple changelog
            echo "changelog=Manual release ${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            # For tag pushes, get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              CHANGELOG=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
            else
              CHANGELOG=$(git log --oneline --pretty=format:"- %s" HEAD)
            fi
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: üîê Create checksums
        run: |
          cd release
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: üöÄ Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: nano-web ${{ steps.version.outputs.version }}
          body: |
            # nano-web ${{ steps.version.outputs.version }}

            üöÄ **Ultra-fast static file server for SPAs and static content**

            ## Installation

            ### Go Install
            ```bash
            go install github.com/radiosilence/nano-web@${{ steps.version.outputs.version }}
            ```

            ### Download Binary
            Download the appropriate binary for your platform from the assets below.

            #### Linux/macOS/FreeBSD/OpenBSD/NetBSD
            ```bash
            # Example for Linux AMD64
            wget https://github.com/radiosilence/nano-web/releases/download/${{ steps.version.outputs.version }}/nano-web-linux-amd64.tar.gz
            tar -xzf nano-web-linux-amd64.tar.gz
            chmod +x nano-web-linux-amd64
            ./nano-web-linux-amd64 --help
            ```

            #### Windows
            ```powershell
            # Download and extract nano-web-windows-amd64.zip
            # Run nano-web-windows-amd64.exe --help
            ```

            ## What's New

            ${{ steps.changelog.outputs.changelog }}

            ## Verification

            All binaries are signed and checksums are provided in `checksums.txt`.

            ---

            **Full Changelog**: https://github.com/radiosilence/nano-web/compare/v0.1.0...${{ steps.version.outputs.version }}
          files: |
            release/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üç∫ Update Homebrew formula
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Updating Homebrew formula to version $VERSION..."
          
          # Download and calculate checksums for required platforms
          DARWIN_AMD64_SHA=$(curl -sL "https://github.com/radiosilence/nano-web/releases/download/v$VERSION/nano-web-darwin-amd64.tar.gz" | sha256sum | cut -d' ' -f1)
          DARWIN_ARM64_SHA=$(curl -sL "https://github.com/radiosilence/nano-web/releases/download/v$VERSION/nano-web-darwin-arm64.tar.gz" | sha256sum | cut -d' ' -f1)
          LINUX_AMD64_SHA=$(curl -sL "https://github.com/radiosilence/nano-web/releases/download/v$VERSION/nano-web-linux-amd64.tar.gz" | sha256sum | cut -d' ' -f1)
          LINUX_ARM64_SHA=$(curl -sL "https://github.com/radiosilence/nano-web/releases/download/v$VERSION/nano-web-linux-arm64.tar.gz" | sha256sum | cut -d' ' -f1)
          
          # Update the formula file
          sed -i "s/version \".*\"/version \"$VERSION\"/" Formula/nano-web.rb
          sed -i "s|download/v[^/]*/|download/v$VERSION/|g" Formula/nano-web.rb
          
          # Update SHA256 hashes for each platform
          awk -v ver="$VERSION" -v amd64_sha="$DARWIN_AMD64_SHA" -v arm64_sha="$DARWIN_ARM64_SHA" -v linux_amd64_sha="$LINUX_AMD64_SHA" -v linux_arm64_sha="$LINUX_ARM64_SHA" '
          /darwin-amd64\.tar\.gz/ { print; getline; gsub(/sha256 "[^"]*"/, "sha256 \"" amd64_sha "\""); print; next }
          /darwin-arm64\.tar\.gz/ { print; getline; gsub(/sha256 "[^"]*"/, "sha256 \"" arm64_sha "\""); print; next }
          /linux-amd64\.tar\.gz/ { print; getline; gsub(/sha256 "[^"]*"/, "sha256 \"" linux_amd64_sha "\""); print; next }
          /linux-arm64\.tar\.gz/ { print; getline; gsub(/sha256 "[^"]*"/, "sha256 \"" linux_arm64_sha "\""); print; next }
          { print }
          ' Formula/nano-web.rb > Formula/nano-web.rb.tmp && mv Formula/nano-web.rb.tmp Formula/nano-web.rb

      - name: üìù Commit and push formula update
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/nano-web.rb
          git commit -m "üç∫ Update Homebrew formula to v$VERSION" || exit 0
          git push
