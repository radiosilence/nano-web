name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-release
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Lint with Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}

  build-binaries:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: nano-web-linux-amd64
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            name: nano-web-linux-arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: nano-web-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: nano-web-windows-amd64.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/nano-web.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/nano-web ${{ matrix.name }}
          fi

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  build-image:
    name: Build ${{ matrix.arch }} Release Image
    runs-on: ${{ matrix.runner }}
    needs: test
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      major: ${{ steps.version.outputs.major }}
      major_minor: ${{ steps.version.outputs.major_minor }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          echo "major=${MAJOR}" >> $GITHUB_OUTPUT
          echo "major_minor=${MAJOR}.${MINOR}" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-${{ matrix.arch }}
          cache-from: type=gha,scope=release-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=release-${{ matrix.arch }}

  create-release-manifest:
    name: Create Release Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push release manifests
        run: |
          VERSION="${{ needs.build-image.outputs.version }}"
          MAJOR="${{ needs.build-image.outputs.major }}"
          MAJOR_MINOR="${{ needs.build-image.outputs.major_minor }}"

          # Create multi-arch manifests for different version tags
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:${VERSION} \
            ghcr.io/${{ github.repository }}:${VERSION}-amd64 \
            ghcr.io/${{ github.repository }}:${VERSION}-arm64

          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:${MAJOR_MINOR} \
            ghcr.io/${{ github.repository }}:${VERSION}-amd64 \
            ghcr.io/${{ github.repository }}:${VERSION}-arm64

          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:${MAJOR} \
            ghcr.io/${{ github.repository }}:${VERSION}-amd64 \
            ghcr.io/${{ github.repository }}:${VERSION}-arm64

          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:${VERSION}-amd64 \
            ghcr.io/${{ github.repository }}:${VERSION}-arm64

          # Clean up individual arch images
          curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/user/packages/container/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]' | cut -d'/' -f2)/versions" | \
            jq -r ".[] | select(.metadata.container.tags[] | contains(\"${VERSION}-amd64\") or contains(\"${VERSION}-arm64\")) | .id" | \
            while read version_id; do
              curl -L \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/user/packages/container/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]' | cut -d'/' -f2)/versions/${version_id}"
            done

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-binaries
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            nano-web-linux-amd64/nano-web-linux-amd64
            nano-web-linux-arm64/nano-web-linux-arm64
            nano-web-macos-arm64/nano-web-macos-arm64
            nano-web-windows-amd64.exe/nano-web-windows-amd64.exe
