name: Docker Branch Build

# Builds Docker images for every branch push with branch name in tag
on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-docker-latest
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build ${{ matrix.arch }} Image
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    if: github.event_name != 'pull_request'
    outputs:
      safe_name: ${{ steps.branch.outputs.safe_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sanitize branch name
        id: branch
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          SAFE_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | tr '[:upper:]' '[:lower:]')
          # Map main branch to latest for Docker convention
          if [ "$SAFE_BRANCH" = "main" ]; then
            SAFE_BRANCH="latest"
          fi
          echo "safe_name=${SAFE_BRANCH}" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.safe_name }}-${{ matrix.arch }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

  create-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    if: github.event_name != 'pull_request'

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          SAFE_NAME="${{ needs.build.outputs.safe_name }}"

          # Create unified multi-arch manifest (primary tag without arch suffix)
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME}-arm64

          # Create commit SHA manifest for reproducible builds (truncated)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHORT_SHA} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME}-arm64

      - name: Show built images
        if: github.event_name != 'pull_request'
        run: |
          SAFE_NAME="${{ needs.build.outputs.safe_name }}"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)

          echo "🐳 **Built Docker Images:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Latest build for this branch (unified multi-arch):" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Specific build with commit SHA:" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHORT_SHA}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Run the ultra-fast server:" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -p 3000:3000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v \$(pwd)/public:/public \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  quick-test:
    name: Quick Docker Test
    runs-on: ubuntu-latest
    needs: [build, create-manifest]
    if: github.event_name != 'pull_request'

    steps:
      - name: Test Docker image
        run: |
          # Create test content
          mkdir -p public
          echo "<html><body>Hello from ${{ github.ref_name }}!</body></html>" > public/index.html

          SAFE_NAME="${{ needs.build.outputs.safe_name }}"

          # Pull and test the unified multi-arch image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME}

          # Start container
          docker run -d --name test-nano-web \
            -p 3000:3000 \
            -v $(pwd)/public:/public \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SAFE_NAME}

          # Wait for startup
          sleep 5

          # Test health endpoint
          curl -f http://localhost:3000/_health || exit 1

          # Test serving content
          RESPONSE=$(curl -s http://localhost:3000/)
          if [[ "$RESPONSE" != *"Hello from ${{ github.ref_name }}!"* ]]; then
            echo "❌ Content test failed"
            echo "Expected: Hello from ${{ github.ref_name }}!"
            echo "Got: $RESPONSE"
            exit 1
          fi

          echo "✅ Docker image test passed!" >> $GITHUB_STEP_SUMMARY
          echo "Branch \`${{ github.ref_name }}\` (tag: ${SAFE_NAME}) is serving correctly" >> $GITHUB_STEP_SUMMARY

          # Cleanup
          docker stop test-nano-web
          docker rm test-nano-web
