version: "3"

env:
  PKGOS: linux
  PKGARCH: amd64
  PKGNAME: nano-web
  RELEASEDIR: ./release
  CGO_ENABLED: 0

vars:
  VERSION:
    sh: cat VERSION 2>/dev/null || echo "dev"
  COMMIT:
    sh: git rev-parse --short HEAD
  BUILD_TIME:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  LDFLAGS: -s -w -X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildTime={{.BUILD_TIME}}
  PKGRELEASE: "{{.PKGNAME}}_{{.VERSION}}"
  PKGDIR: "{{.RELEASEDIR}}/{{.PKGRELEASE}}-{{.PKGARCH}}"

tasks:
  default:
    desc: "Show available tasks"
    cmd: task --list

  dev:
    desc: "🚀 Run development server"
    deps: [build]
    cmd: ./{{.PKGNAME}} serve --port 8080 --log-format console --log-level debug

  run:
    desc: "🏃 Run with go run"
    cmd: go run . serve --port 8080 --log-format console --log-level debug

  build:
    desc: "🏗️ Build binary"
    sources:
      - "*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "{{.PKGNAME}}"
    cmd: go build -ldflags="{{.LDFLAGS}}" -o {{.PKGNAME}} .

  build-all:
    desc: "🌍 Build for all platforms"
    deps: [clean-dist]
    cmds:
      - mkdir -p dist
      - GOOS=linux GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.PKGNAME}}-linux-amd64 .
      - GOOS=linux GOARCH=arm64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.PKGNAME}}-linux-arm64 .
      - GOOS=darwin GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.PKGNAME}}-darwin-amd64 .
      - GOOS=darwin GOARCH=arm64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.PKGNAME}}-darwin-arm64 .
      - GOOS=windows GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.PKGNAME}}-windows-amd64.exe .
      - GOOS=freebsd GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.PKGNAME}}-freebsd-amd64 .

  test:
    desc: "🧪 Run tests"
    env:
      CGO_ENABLED: 1
    cmd: go test -v -race ./...

  test-coverage:
    desc: "📊 Run tests with coverage"
    env:
      CGO_ENABLED: 1
    cmds:
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated coverage.html"

  bench:
    desc: "🔥 Run benchmarks"
    env:
      CGO_ENABLED: 1
    cmd: go test -bench=. -benchmem -count=3 ./...

  lint:
    desc: "🔍 Run linter"
    cmd: golangci-lint run

  fmt:
    desc: "✨ Format code"
    cmds:
      - go fmt ./...
      - goimports -w .

  vet:
    desc: "🔎 Run go vet"
    cmd: go vet ./...

  check:
    desc: "✅ Run all checks"
    cmds:
      - task: test
      - task: lint
      - task: vet

  deps:
    desc: "📦 Download dependencies"
    cmd: go mod download

  deps-update:
    desc: "⬆️ Update dependencies"
    cmds:
      - go get -u ./...
      - go mod tidy

  clean:
    desc: "🧹 Clean build artifacts"
    cmds:
      - rm -f {{.PKGNAME}}
      - rm -f coverage.out coverage.html

  clean-dist:
    desc: "🗑️ Clean dist directory"
    cmd: rm -rf dist/

  clean-all:
    desc: "💥 Clean everything"
    deps: [clean, clean-dist, pkg-clean]

  docker-build:
    desc: "🐳 Build Docker image"
    cmd: docker build -t {{.PKGNAME}}:{{.VERSION}} -t {{.PKGNAME}}:latest .

  docker-run:
    desc: "🚢 Run Docker container"
    deps: [docker-build]
    cmd: docker run --rm -p 8080:8080 -e PORT=8080 {{.PKGNAME}}:latest

  release-local:
    desc: "🚀 Create local release"
    deps: [build-all]
    cmds:
      - mkdir -p {{.RELEASEDIR}}
      - cd dist && for file in {{.PKGNAME}}-*; do tar -czf ../{{.RELEASEDIR}}/$file.tar.gz $file; done
      - cd {{.RELEASEDIR}} && sha256sum *.tar.gz > checksums.txt
      - echo "Local release created in release dir"

  pkg-clean:
    desc: "🧹 Clean package artifacts"
    cmd: rm -rf {{.RELEASEDIR}}

  pkg-build:
    desc: "📦 Build OPS package binary"
    env:
      GOOS: "{{.PKGOS}}"
      GOARCH: "{{.PKGARCH}}"
    cmd: |
      mkdir -p {{.PKGDIR}}
      go build -ldflags="{{.LDFLAGS}}" -o {{.PKGDIR}}/{{.PKGNAME}} .

  pkg-create:
    desc: "📁 Create OPS package structure"
    deps: [pkg-clean]
    cmds:
      - mkdir -p {{.PKGDIR}}/sysroot/public
      - |
        cat > {{.PKGDIR}}/package.manifest << EOF
        {
           "Program":"{{.PKGRELEASE}}/{{.PKGNAME}}",
           "Args" : ["{{.PKGNAME}}", "serve"],
           "Version":"{{.VERSION}}"
        }
        EOF
      - cp README.md {{.PKGDIR}}/

  pkg-add:
    desc: "➕ Add OPS package"
    deps: [pkg-create, pkg-build]
    cmd: ops pkg add {{.PKGDIR}} --name {{.PKGRELEASE}}

  pkg-bundle:
    desc: "📦 Bundle OPS package"
    deps: [pkg-add]
    cmds:
      - cd {{.RELEASEDIR}} && tar czvf {{.PKGRELEASE}}-{{.PKGARCH}}.tar.gz {{.PKGRELEASE}}-{{.PKGARCH}}
      - echo "Package bundle created"

  pkg-push:
    desc: "📤 Push OPS package"
    deps: [pkg-add]
    cmd: ops pkg push {{.PKGRELEASE}}

  pkg-load:
    desc: "🚀 Load and run OPS package"
    deps: [pkg-add]
    cmd: ops pkg load -l {{.PKGRELEASE}} -p 80

  health:
    desc: "🩺 Run health check"
    deps: [build]
    cmd: ./{{.PKGNAME}} health-check

  current-version:
    desc: "📋 Show current version from file"
    cmd: cat VERSION

  publish:
    desc: "📡 Publish module to Go proxy"
    vars:
      VERSION: "{{.VERSION}}"
    cmd: GOPROXY=proxy.golang.org go list -m github.com/radiosilence/nano-web@v{{.VERSION}}

  publish-current:
    desc: "📡 Publish current version to Go proxy"
    cmd: GOPROXY=proxy.golang.org go list -m github.com/radiosilence/nano-web@v{{.VERSION}}

  version:
    desc: "📋 Show version"
    cmd: echo "Version {{.VERSION}} Commit {{.COMMIT}} Built {{.BUILD_TIME}}"

  info:
    desc: "ℹ️ Show project info"
    cmds:
      - echo "Project {{.PKGNAME}}"
      - echo "Version {{.VERSION}}"
      - echo "Commit {{.COMMIT}}"
      - echo "Build Time {{.BUILD_TIME}}"
      - go version
      - echo "Platform {{OS}}/{{ARCH}}"

  version-bump:
    desc: "📝 Update version in VERSION file"
    vars:
      NEW_VERSION: "{{.CLI_ARGS}}"
    preconditions:
      - sh: '[ -n "{{.NEW_VERSION}}" ]'
        msg: "Please provide a version: task version-bump -- 1.0.1"
    cmds:
      - echo "{{.NEW_VERSION}}" > VERSION
      - echo "Updated VERSION file to {{.NEW_VERSION}}"

  tag:
    desc: "🏷️ Create git tag and push (auto-updates version)"
    vars:
      TAG: "{{.CLI_ARGS}}"
      TAG_VERSION:
        sh: echo "{{.CLI_ARGS}}" | sed 's/^v//'
    preconditions:
      - sh: '[ -n "{{.TAG}}" ]'
        msg: "Please provide a tag: task tag -- v1.0.1 or task tag -- 1.0.1"
      - sh: "git diff --quiet"
        msg: "Working directory must be clean before tagging"
    cmds:
      - echo "{{.TAG_VERSION}}" > VERSION
      - git add VERSION
      - git commit -m "Bump version to {{.TAG_VERSION}}"
      - git tag -a v{{.TAG_VERSION}} -m "Release v{{.TAG_VERSION}}"
      - git push origin main
      - git push origin v{{.TAG_VERSION}}
      - echo "✅ Successfully created and pushed tag v{{.TAG_VERSION}}"
      - echo "📡 Publishing to Go module proxy..."
      - GOPROXY=proxy.golang.org go list -m github.com/radiosilence/nano-web@v{{.TAG_VERSION}}
      - echo "📦 Version {{.TAG_VERSION}} is now live and published!"

  tag-local:
    desc: "🏷️ Create local git tag only (no push)"
    vars:
      TAG: "{{.CLI_ARGS}}"
      TAG_VERSION:
        sh: echo "{{.CLI_ARGS}}" | sed 's/^v//'
    preconditions:
      - sh: '[ -n "{{.TAG}}" ]'
        msg: "Please provide a tag: task tag-local -- v1.0.1"
    cmds:
      - echo "{{.TAG_VERSION}}" > VERSION
      - git add VERSION
      - git commit -m "Bump version to {{.TAG_VERSION}}"
      - git tag -a v{{.TAG_VERSION}} -m "Release v{{.TAG_VERSION}}"
      - echo "Created local tag v{{.TAG_VERSION}}"
      - echo "Push with git push origin main and git push origin v{{.TAG_VERSION}}"

  ci:
    desc: "🤖 Run CI pipeline"
    cmds:
      - task: deps
      - task: check
      - task: build-all
      - echo "CI completed successfully"
